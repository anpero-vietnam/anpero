{"version":3,"file":"logo.css","sources":["components/logo/logo.scss","components/bootstrap/scss/_functions.scss","components/base/_functions.scss"],"sourcesContent":["@import \"../bootstrap/scss/functions\";\r\n@import \"../base/functions\";\r\n\r\n// Base\r\n.logo-link {\r\n\t> * {\r\n\t\tmargin-top: 0;\r\n\t}\r\n}\r\n\r\n.logo-image-inverse {\r\n\tdisplay: none;\r\n}\r\n\r\n\r\n// Spacing\r\n.logo + p {\r\n\tmargin-top: px-to-rem( 30px );\r\n}\r\n\r\n\r\n// Contexts\r\n.context-dark {\r\n\t.logo-image-default {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t.logo-image-inverse {\r\n\t\tdisplay: inline-block;\r\n\t}\r\n}","// Bootstrap functions\r\n//\r\n// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.\r\n\r\n// Ascending\r\n// Used to evaluate Sass maps like our grid breakpoints.\r\n@mixin _assert-ascending($map, $map-name) {\r\n  $prev-key: null;\r\n  $prev-num: null;\r\n  @each $key, $num in $map {\r\n    @if $prev-num == null or unit($num) == \"%\" {\r\n      // Do nothing\r\n    } @else if not comparable($prev-num, $num) {\r\n      @warn \"Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !\";\r\n    } @else if $prev-num >= $num {\r\n      @warn \"Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !\";\r\n    }\r\n    $prev-key: $key;\r\n    $prev-num: $num;\r\n  }\r\n}\r\n\r\n// Starts at zero\r\n// Used to ensure the min-width of the lowest breakpoint starts at 0.\r\n@mixin _assert-starts-at-zero($map, $map-name: \"$grid-breakpoints\") {\r\n  $values: map-values($map);\r\n  $first-value: nth($values, 1);\r\n  @if $first-value != 0 {\r\n    @warn \"First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.\";\r\n  }\r\n}\r\n\r\n// Replace `$search` with `$replace` in `$string`\r\n// Used on our SVG icon backgrounds for custom forms.\r\n//\r\n// @author Hugo Giraudel\r\n// @param {String} $string - Initial string\r\n// @param {String} $search - Substring to replace\r\n// @param {String} $replace ('') - New value\r\n// @return {String} - Updated string\r\n@function str-replace($string, $search, $replace: \"\") {\r\n  $index: str-index($string, $search);\r\n\r\n  @if $index {\r\n    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\r\n  }\r\n\r\n  @return $string;\r\n}\r\n\r\n// Color contrast\r\n@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {\r\n  $r: red($color);\r\n  $g: green($color);\r\n  $b: blue($color);\r\n\r\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\r\n\r\n  @if ($yiq >= $yiq-contrasted-threshold) {\r\n    @return $dark;\r\n  } @else {\r\n    @return $light;\r\n  }\r\n}\r\n\r\n// Retrieve color Sass maps\r\n@function color($key: \"blue\") {\r\n  @return map-get($colors, $key);\r\n}\r\n\r\n@function theme-color($key: \"primary\") {\r\n  @return map-get($theme-colors, $key);\r\n}\r\n\r\n@function gray($key: \"100\") {\r\n  @return map-get($grays, $key);\r\n}\r\n\r\n// Request a theme color level\r\n@function theme-color-level($color-name: \"primary\", $level: 0) {\r\n  $color: theme-color($color-name);\r\n  $color-base: if($level > 0, $black, $white);\r\n  $level: abs($level);\r\n\r\n  @return mix($color-base, $color, $level * $theme-color-interval);\r\n}\r\n","// Functions\r\n\r\n// All Headings\r\n@function headings() {\r\n\t@return unquote( 'h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6' );\r\n}\r\n\r\n// Remove the unit of a length\r\n// @param {number} $number - Number to remove unit from\r\n// @return {number} - Unitless number\r\n@function strip-unit( $number ) {\r\n\t@if type-of( $number ) == 'number' and not unitless( $number ) {\r\n\t\t@return $number / ( $number * 0 + 1 );\r\n\t}\r\n\r\n\t@return $number;\r\n}\r\n\r\n// Converts px to rem\r\n// @param {number|list} $value - number or list in px\r\n// @return {number|list} - number or list in rem\r\n@function px-to-rem( $values... ) {\r\n\t@if length( $values ) == 1 {\r\n\t\t@return strip-unit( nth( $values, 1 ) ) / 16 * 1rem;\r\n\t} @else {\r\n\t\t$result: ();\r\n\t\t@each $value in $values {\r\n\t\t\t$result: append( $result, strip-unit( $value ) / 16 * 1rem );\r\n\t\t}\r\n\t\t@return $result;\r\n\t}\r\n}\r\n\r\n// Color contrast level\r\n@function get-yiq( $color ) {\r\n\t$r: red( $color );\r\n\t$g: green( $color );\r\n\t$b: blue( $color );\r\n\r\n\t@return (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\r\n}\r\n"],"names":[],"mappings":"AAIA,AACC,UADS,GACP,CAAC,CAAC,GACH,UAAU,EAAE,CAAC,GACb,EAGF,AAAA,mBAAmB,CAAC,GACnB,OAAO,EAAE,IAAI,GACb,EAID,AAAA,KAAK,GAAG,CAAC,CAAC,GACT,UAAU,EEMD,QAA2C,GFLpD,EAID,AACC,aADY,CACZ,mBAAmB,CAAC,GACnB,OAAO,EAAE,IAAI,GACb,EAHF,AAKC,aALY,CAKZ,mBAAmB,CAAC,GACnB,OAAO,EAAE,YAAY,GACrB"}